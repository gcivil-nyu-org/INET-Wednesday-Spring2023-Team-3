# Generated by Django 4.1.7 on 2023-03-14 22:13

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "name",
                    models.CharField(max_length=30, primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Difficulty",
            fields=[
                (
                    "text",
                    models.CharField(max_length=10, primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Position",
            fields=[
                (
                    "name",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                ("q_id", models.BigAutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=50)),
                ("description", models.CharField(blank=True, max_length=1000)),
                ("difficulty", models.CharField(blank=True, max_length=10)),
                ("type", models.CharField(blank=True, max_length=50)),
                (
                    "companies",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        verbose_name="Comma-separated list of companies",
                    ),
                ),
                (
                    "positions",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        verbose_name="Comma-separated list of positions",
                    ),
                ),
                (
                    "categories",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        verbose_name="Comma-separated list of categories",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Todo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("user_id", models.AutoField(primary_key=True, serialize=False)),
                ("email", models.EmailField(max_length=100, unique=True)),
                ("username", models.CharField(max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("date_joined", models.DateField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
